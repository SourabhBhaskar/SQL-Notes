



Table 
-----
    1. Creating table
        - Creating table
            CREATE TABLE table_name(
                column1 DATATYPE,
                ....
            )
        - Create tabel if not exist
            CREATE TABLE IF NOT EXISTS tabel_name(
                column1 DATATYPE,
                column2 DATATYPE,
                ....
            )

    2. Showing Tables
        - It list all the tables from current database
            SHOW TABLES;

    3. Renaming Table
        - It renames a old tabel with new name if that's name table doesnot exist
            RENAME TABLE old_name TO new_name;

    5. Clearing Table
        - It Removes all rows from a table, regardless of conditions.
            TRUNCATE TABLE table_name

    6. Cloning Table
        - Simple cloning : Structure is copied, and data may be referenced.
            CREATE TABLE new_table SELECT * FROM original_table;
        - Shallow cloning : Structure and data are copied, but relationships might still reference the same data.
            CREATE TABLE new_table LIKE original_table;
        - Deep cloning : Both the structure and all the data are copied, creating an entirely independent table.
            CREATE TABLE new_table LIKE original_table;
            INSERT INTO new_table SELECT * FROM original_table;

    8. Inserting Into Tabel
        - It inserts new records into table
            INSERT INTO table_name (column1, column2, column3, ...)
            VALUES (value1, value2, value3, ...);
    
    9. Altering Tabel
        - Modifies the structure of a table.
            ALTER TABLE table_name [alter_option...]
        - Column CRUD 
            - Adding   : ALTER TABLE table_name ADD column_name datatype;
            - Removing : ALTER TABLE table_name DROP COLUMN column_name;
            - Renaming : ALTER TABLE table_name RENAME COLUMN old_column_name TO new_column_name;
            - Updating 
                - DataType modification : ALTER TABLE table_name MODIFY COLUMN column_name datatype;

    11. Delete Tabel
        - Removes a table's definition, data, indexes, triggers, constraints, and permissions associated with the table.  
            DROP TABLE table_name

    12. Deleting From Tabel 
        - Removes all the rows from table.
            DELETE TABLE table_name
        - Removes specific rows from tabel
            DELETE TABLE table_name WHERE condition
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------




constraints
-----------
    1.NOT NULL Constraint
        -Ensures a column cannot have a NULL value.
        CREATE TABLE CUSTOMERS (
            ID INT NOT NULL,
        );

    2.UNIQUE Key Constraint    
        - Ensures a column accepts only UNIQUE values.
        CREATE TABLE CUSTOMERS (
            ID INT UNIQUE,
        );

    3.DEFAULT Value Constraint
        - Provides a default value for a column if not specified.
        CREATE TABLE CUSTOMERS (
            NAME VARCHAR (20) DEFAULT 'Not Available'
        );

    4.PRIMARY Key Constraint   
        - Ensures a column accepts only UNIQUE values; uniquely identifies a record.
        CREATE TABLE CUSTOMERS (
            ID INT,
            PRIMARY KEY (ID)
        );

    5.FOREIGN Key Constraint   
        - Maps a column to another table; uniquely identifies a record.
        CREATE TABLE ORDERS (
            ID INT NOT NULL,
            CUSTOMER_ID INT FOREIGN KEY REFERENCES CUSTOMERS(ID),
        );

    6.CHECK Value Constraint
        - Validates data entered into a column based on specified conditions.
        CREATE TABLE CUSTOMERS (
            ID INT NOT NULL,
            AGE INT CHECK(AGE>=18),
        );

    7.INDEX Constraint
        - Speeds up data retrieval; can be Unique or Non-Unique.
        CREATE INDEX idx_age ON CUSTOMERS ( AGE );
    
    8.Dropping Constraints
        ALTER TABLE table_name DROP CONSTRAINT constraint_name;
        ALTER TABLE CUSTOMERS DROP CONSTRAINT PRIMARY KEY;
-----------------------------------------------------------------------------------------------------------------------------------------




Row CRUD
---------
    1. Create
        - With column name    : INSERT INTO customers(id, name, age) VALUES (1, 'Sourabh', 21), ...;
        - Without column name : INSERT INTO customers VALUES (1, 'Sourabh', 21), ...;

    2. Read
        - You can select specifie columns using(their name) instead of selecting all rows using(*)
        - Specific : SELECT * FROM customers WHERE fname = "Farjana";
        - All : SELECT * FROM customers 

    5. UPDATE
        - Specific : UPDATE customers SET fname = "Vishakha" WHERE faname = "Farjana";
        - All      : UPDATE customers SET fname = "Vishakha"

    6. Delete
        - Specific : DELETE FROM customers WHERE fname = "Sourabh";
        - All rows : DELETE FROM customers 
-----------------------------------------------------------------------------------------------------------------------------------------




Operators & clause
------------------

    1. WHERE
        - Used to filter records based on specified conditions.
        SELECT name FROM customers WHERE salary > 2000

    2. TOP
        - Retrieves a specific number of rows from the beginning of a result set.
        SELECT TOP 4 FROM customers

    3. LIMIT
        - Limits the number of rows returned in a result set.
        SELECT * FROM customers LIMIT 4

    4. DISTINCT
        - Retrieves unique values from a specified column.
        SELECT DISTINCT salary FROM customers

    5. ORDER BY
        - Sorts the result set based on specified columns and order (ASC or DESC).
        SELECT * FROM CUSTOMERS ORDER BY NAME ASC

    6. GROUP BY
        - Groups rows that have the same values in specified columns, often used with aggregate functions.
        SELECT salary, COUNT(name) FROM customers GROUP BY salary

    7. HAVING
        - Filters the results of a GROUP BY based on specified conditions.
        SELECT address, age, COUNT(address) as count FROM customers GROUP BY address, age HAVING count >= 1

    8. OR
        - Retrieves records where at least one of the specified conditions is true.
        SELECT ID, NAME, SALARY FROM CUSTOMERS WHERE SALARY > 2000 OR AGE < 25

    9. AND
        - Retrieves records where all of the specified conditions are true.
        SELECT ID, NAME, SALARY FROM CUSTOMERS WHERE SALARY > 2000 AND AGE < 25

    10. BOOLEAN/BIT
        - Represents true or false values.
        SELECT * FROM CARS WHERE IsRed = TRUE or SELECT * FROM CARS WHERE IsRed = 1

    11. LIKE
        - Searches for a specified pattern in a column.
        SELECT * FROM CUSTOMERS WHERE SALARY LIKE '200%'

    12. IN
        - Specifies multiple values for a WHERE clause.
        SELECT * FROM CUSTOMERS WHERE NAME IN ('Khilan', 'Hardik', 'Muffy')

    13. ANY
        - Compares a value to any value in a subquery.
        WHERE SALARY > ANY (SELECT SALARY FROM CUSTOMERS WHERE AGE = 32)

    14. ALL
        - Compares a value to all values in a subquery.
        WHERE SALARY > ALL (SELECT SALARY FROM CUSTOMERS WHERE AGE = 32)

    15. EXISTS
        - Tests for the existence of any record in a subquery.
        SELECT * FROM CUSTOMERS WHERE EXISTS (SELECT PRICE FROM CARS WHERE CARS.ID = CUSTOMERS.ID AND PRICE > 2000000)

    16. CASE
        - Performs conditional logic within a query.
        SELECT *, CASE WHEN SALARY < 4500 THEN (SALARY + SALARY * 25/100) END AS INCREMENT FROM CUSTOMERS

    17. NOT
        - Negates a condition in a WHERE clause.
        SELECT * FROM CUSTOMERS WHERE NOT (SALARY > 2000.00)

    18. <>/!=
        - Checks for inequality between two values.
        SELECT * FROM CUSTOMERS WHERE NAME <> 'Ramesh'

    19. IS NULL
        - Filters records where a specified column is NULL.
        SELECT * FROM CUSTOMERS WHERE ADDRESS IS NULL

    20. IS NOT NULL
        - Filters records where a specified column is not NULL.
        SELECT * FROM CUSTOMERS WHERE ADDRESS IS NOT NULL

    21. BETWEEN
        - Retrieves data within a specified range (inclusive).
        SELECT * FROM CUSTOMERS WHERE AGE BETWEEN 20 AND 25


    22. UNION
        - Combines the result of two queries and returns distinct result.
        SELECT column1, column2, ... FROM table1
        UNION
        SELECT column1, column2, ... FROM table2;

    23. UNION ALL
        - Combines the result of two queries and returns result but not distinct.
        SELECT column1, column2, ... FROM table1
        UNION ALL
        SELECT column1, column2, ... FROM table2;

    24. INTERSECT
        - Combines the result of two queries and returns common result.
        SELECT column1, column2, ... FROM table1
        INSERSECT
        SELECT column1, column2, ... FROM table2;
    
    25. ALIASES 
        - Aliases in SQL are temporary names assigned to tables or columns in a query. 
        SELECT C.ID, C.NAME, C.AGE, O.AMOUNT 
        FROM CUSTOMERS AS C, ORDERS AS O
        WHERE  C.ID = O.CUSTOMER_ID;
-----------------------------------------------------------------------------------------------------------------------------------------




SQL Joins
---------
    1. JOIN 
        - 
        SELECT ID, NAME, AGE, AMOUNT FROM CUSTOMERS JOIN ORDERS ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;
    
    2. INNER JOIN
        - 
        SELECT ID, NAME, AGE, AMOUNT FROM CUSTOMERS INNER JOIN ORDERS ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;
    
    3. LEFT JOIN 
        - 
        SELECT ID, NAME, AGE, AMOUNT FROM CUSTOMERS LEFT JOIN ORDERS ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;
    
    4. RIGHT JOIN
        - 
        SELECT ID, NAME, AGE, AMOUNT FROM CUSTOMERS RIGHT JOIN ORDERS ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;

    5. FULL JOIN
        - 
        SELECT ID, NAME, AGE, AMOUNT FROM CUSTOMERS FULL JOIN ORDERS ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;  
    
    6. CROSS JOIN
        - 
        SELECT ID, NAME, AMOUNT FROM CUSTOMERS CROSS JOIN ORDERS;
-----------------------------------------------------------------------------------------------------------------------------------------




Advanced SQL
-----------

    1. Wilecard
        - A wildcard is a placeholder character used in string matching for the purpose of searching patterns.
        - It is case-sensitive.     
        - % : It determines where the search should start, end, or include characters in the middle.
            In start  : SELECT * FROM customers WHERE name LIKE 'p%';
            In end    : SELECT * FROM customers WHERE name LIKE '%p';
            In middle : SELECT * FROM customers WHERE name LIKE '%k%';
        - _ : It is used to represent a single character in a string.
            In second place from start : SELECT * FROM customers WHERE name LIKE '_a%';
            In second place from end   : SELECT * FROM customers WHERE name LIKE '%a_';




    2. Comments
        - Queries insdie comments dont execute.
        - Single line comment : -- queries
        - Multi line comment  : /* queries */




    3. MIN/MAX Functions
        - Finds min or max values from a set
        SELECT MIN(SALARY) FROM CUSTOMERS;
        SELECT MAX(SALARY) FROM CUSTOMERS;





    3. Null Functions
        1. ISNULL()
            - Returns 0 or 1 based on whether the expression is null or not.
            SELECT SALARY, ISNULL(SALARY) AS Null_value;
    
        2. COALESCE()
            - Returns the first non-NULL expression among its arguments.
            SELECT NAME, SALARY, AGE, COALESCE(SALARY, AGE) AS Result;
    
        3. NULLIF() 
            - Compares two expressions; returns NULL if they are the same, otherwise returns the first expression.
            SELECT NAME, ADDRESS, NULLIF(NAME, ADDRESS) AS Result;
    
        4. IFNULL() Function
            - Replaces NULL values with a specific value.
            SELECT NAME, SALARY, IFNULL(SALARY, 5500) AS Result;




    4. Check Constraint
        - Adds conditions on a column to ensure data integrity.
        CREATE TABLE table_name (
            column_name data_type CHECK (condition)
        );

    


    5. DEFAULT Constraint
        - Specifies default values for columns during table creation.
        CREATE TABLE table_name (
            column1 datatype DEFAULT default_value,
            column2 datatype DEFAULT default_value,
            ...
            columnN datatype
        );


    

    6. Constraints
        - In SQL, constraints are rules defined on tables to enforce data integrity. 

        1. PRIMARY KEY Constraint : Uniquely identifies each record in a table.
            CREATE TABLE table_name(
                column_name DATATYPE,
                PRIMARY KEY(column_name)
            );

        2. FOREIGN KEY Constraint : Establishes a link between two tables.
            CREATE TABLE table_name(
                column_name DATATYPE,
                foreign_key_column DATATYPE,
                CONSTRAINT foreign_key_constraint_name FOREIGN KEY(foreign_key_column) REFERENCES another_table_name(primary_key_column)
            );
            
        3. UNIQUE Constraint : Ensures uniqueness of values in a column or a set of columns.
            CREATE TABLE table_name (
                column_name DATATYPE UNIQUE
            );

        4. CHECK Constraint : Specifies conditions that must be met for the data in a column.
            CREATE TABLE table_name (
                column_name DATATYPE CONSTRAINT check_contraint_name CHECK(conditions),
            );


        5. DEFAULT Constraint : Provides a default value for a column if no value is specified during insertion.
            CREATE TABLE table_name (
                column_name DATATYPE DEFAULT default_value,
            );
        
        6. NOT NULL Constraint : Ensures that a column cannot have a NULL value.
            CREATE TABLE table_name (
                column_name DATATYPE NOT NULL,
            );