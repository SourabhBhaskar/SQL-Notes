Introduction
------------

    * DBA
        - A person who has central control of both the data and the programs that access those data.
        - A Database Administrator (DBA) is a professional responsible for managing and ensuring the optimal performance, security, 
        and integrity of a database management system (DBMS).


    * Data
        - Data is a collection of raw bits and bytes without inherent meaning
        - It's type 
            1. Quantitative Data : Numeric data that represents quantities and can be measured and counted. Height, weight, temperature etc.
            2. Qualitative Data : Non-numeric data that describes qualities or characteristics and cannot be easily measured. Color, taste, opinion etc.

    * Information 
        - Proccessed data is information that is meaningful. 


    * Database
        - A database is an electronic system designed for the efficient storage, processing, and management of data, enabling easy access and retrieval


    * DBMS 
        - DBMS is software for efficiently storing, retrieving, and managing data in databases.




DBMS Architecture
-----------------
    * View of Data (Three Schema Architecture)
        - It enables multiple users to access the same data with a personalized view while storing the underlying data only once.
        1. Physical/Internal Level  : Describes data storage details, such as storage allocation, compression, and encryption. It is for DBA.
        2. Logical/Conceptual Level : Represents the overall database design at a conceptual level. It is for backend developers.
        3. View/External Level      : Provides personalized views for user groups, allowing multiple accesses to the same data stored once. It is for frontend developers.


    * Instances
        - The collection of information stored in the DB at a particular moment is called an instance of DB.


    * Data Model
        - Conceptual representation of data organization and relationships.
        - Example: ER model for a university with entities like "Student" and relationships like "Enrolls In."


    * Schema
        - Specific implementation detailing database organization and structure.
        - Example: Physical instantiation of the university ER model with tables like "StudentTable" and fields like "StudentID."


    * DBMS Languages
        1. DDL (Data Definition Language):
            - Purpose: Defines and manages database structure.
            - Example: CREATE TABLE Students (ID INT, Name VARCHAR(50));
        
        2. DML (Data Manipulation Language):
            - Purpose: Manages and manipulates data.
            - Example: SELECT * FROM Students WHERE ID = 1;
        
        3. DCL (Data Control Language):
            - Purpose: Controls data access and privileges.
            - Example: GRANT SELECT ON Students TO User1;


    * DBMS Application Architecture
        1. Single-Tier Architecture              : Frontend, backend, and database are all on the same machine.
        2. Two-Tier Architecture (Client-Server) : Frontend on one machine (client), backend and database on another (server).
        3. Three-Tier Architecture               : Frontend on one machine, backend on a separate server, and database on another server.




Entity-Relationship Model
-------------------------
    * Data Model 
        - A structured blueprint for organizing and storing data.

    * ER Model
        - Visual representation showing how entities relate in a database.

    * Entity 
        - An entity is a real-world object or concept that is distinguishable and identifiable. 
        - Types of Entities
            1. Strong Entity      : Independent and has a primary key. Example: Student
            2. Weak Entity        : Depends on another entity for existence. Example: Course
            3. Associative Entity : Represents a relationship between two or more entities. Example: "Enrollment"
    
    * Entity set 
        - A grouping of similar entities sharing common characteristics or properties in a database. Example: Students(contains student)

    * Attributes
        - Attributes in a database represent specific details or properties of entities, like StudentID or Name in a "Student" entity.

    * Types of attributes
        1. Simple        : Represents an atomic, indivisible value. Example: Age, Name.
        2. Composite     : Composed of multiple simple attributes. Example: Address (composed of Street, City, Zip).
        3. Derived       : Calculated or derived from other attributes. Example: Age (derived from Date of Birth).
        4. Key           : Part of the primary key. Example: StudentID in a "Student" entity.
        5. Single-Valued : Holds a single value for each entity. Example: DateOfBirth.
        6. Multi-Valued  : Can hold multiple values for each entity. Example: Phone Numbers.    
        7. Null          : It indicates the absence of data or an unknown value. Example: Phone Number

    * Relationships
        - A relationship represents an association between entities.
        - Example: Person has vehicle, Parent has Child, Customer borrow loan etc.
    
    * Types of relationship
        1. Strong Relationship : Between two independent entities. Example: Student(strong) & Address(strong)
        2. Weak Relationship   : Between weak entity and its owner/strong entity. Example Student(strong) & StudentFee(weak)


    * Degree of Relationship
        - Number of entities participating in a relationship.
        1. Unary, Only one entity participates. Example: Employee manages employee.
        2. Binary, two entities participates. Example: Student takes Course.
        3. Ternary relationship, three entities participates. Example: Employee works-on branch, Employee works-on job.

    * Mapping Cardinality / Cardinality Ratio
        - Number of entities to which another entity can be associated via a relationship.
        1. One-to-One (1:1)
            - Each entity in the relationship is associated with, at most, one instance of the other entity. 
            - Example : Person & Passport
        2. One-to-Many (1:N)
            - Each entity in the relationship can be associated with multiple instances of the other entity.
            - Department & Managers
        3. Many-to-One (N:1)  
            - Multiple instances of one entity are associated with a single instance of the other entity.
            - City & Citizen
        4. Many-to-Many (N:N) 
            - Multiple instances of each entity can be associated with multiple instances of the other entity.
            - Student & Course
        
    * Participation Constraints
        - Participation refers to the involvement of entities in a relationship.
        1. Total Participation (Mandatory)
            - Every entity must participate.
            - Example: Each department must have at least one employee.
        2. Partial Participation (Optional)
            - Some entities may not participate.
            - Example: Not every employee needs to be associated with a department.

    * ER Notations
        1. Strong Entity : Rectangle
        2. Weak Entity   : Double Rectangle
        3. Simple Attribute : Ellipse
        4. Multi-valued Attribute : Double Ellipse
        5. Primary Key Attribute : Ellipse with underline (e.g., __Name__)
        6. Weak Key Attribute : Ellipse with dotted underline (e.g., ..Address..)
        7. Derived Attribute : Dotted Ellipse
        8. Strong Relationship : 45-degree tilted square
        9. Weak Relationship : 45-degree tilted Double square
        10. Total Participation : Connected line
        11. Partial Participation : Connected with Double line
