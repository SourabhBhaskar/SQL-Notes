Cross Join
----------
    
    * Definition
        - A cross join, also known as a Cartesian join, is a type of join operation in a relational database that returns the Cartesian product of the two tables involved. 
        In other words, it combines each row from the first table with every row from the second table, 
        resulting in a new table with the total number of rows being the product of the rows in the two tables.

    * Syntax:
        SELECT * 
        FROM table1
        CROSS JOIN table2;

    * Key Points
        - Combinations: Cross join returns all possible combinations of rows from both tables.
        - Result Rows: The number of rows in the result set is equal to the number of rows in the first table multiplied by the number of rows in the second table.
        - Use Cases: Cross joins are used when you want to generate all possible combinations and are typically not used in day-to-day queries due to their potential to produce large result sets.
        - No Join Condition: Unlike other join types, cross joins do not require a specific join condition.


Self Join
---------
    
    * Definition
        - A self join is a specific case of a regular join where a table is joined with itself. 
        - It is used when you want to combine rows from a table with other rows in the same table based on related column values.

    Syntax:
        SELECT * 
        FROM table1 AS t1
        INNER JOIN table1 AS t2 ON t1.column_name = t2.column_name;

    * Key Points
        - Same Table: In a self join, the same table is referenced twice, but with different aliases to distinguish between the two instances of the table.
        - Join Conditions: The join condition is specified just like in any other join, but it involves columns within the same table.
        - Hierarchical Relationships: Self joins are commonly used in scenarios where there is a hierarchical relationship within a table, such as in organizational structures where employees have managers who are also employees.
        - Alias Usage: Using aliases is crucial to distinguish between the different instances of the same table.